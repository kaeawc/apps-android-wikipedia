name: Android test and alpha update

on:
  push:
    branches: [ main ]

env:
  # Setting an environment variable with the value of a configuration variable
  env_var: ${{ vars.ENV_CONTEXT_VAR }}

jobs:
  build_alpha:
    runs-on: ubuntu-latest
    steps:
    - name: "Git Checkout"
      uses: actions/checkout@v4

    - name: "Check for missing qq strings"
      run: ./scripts/missing-qq.py

    - name: "Checkout submodules"
      run: git submodule update --init --recursive

    - name: "Gradle Wrapper Validation"
      uses: gradle/wrapper-validation-action@v1

    - name: "Install JDK"
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '20'

    - name: "Print Java Flags & version"
      run: |
        java -XX:+UseParallelGC -XX:+UnlockExperimentalVMOptions -XX:+PrintFlagsFinal -version

    - name: "Evaluate Gradle Flags"
      run: |

        # Note that we do not attempt to visually align JVM args - spaces included in kotlin.daemon.jvmargs causes the Kotlin compiler daemon to not run and fallback to Gradle in-process
        export GRADLE_FLAGS="
          --continue
          --stacktrace
          "

        # Remove any newlines or tabs from GRADLE_FLAGS
        export GRADLE_FLAGS="${GRADLE_FLAGS//[$'\t\r\n']}"

        # Write temporary file for checksum
        echo "$GRADLE_FLAGS" > /tmp/gradle_flags.txt

        # Also export it to system environment in case this gets used in other commands
        echo 'export GRADLE_FLAGS=$(cat /tmp/gradle_flags.txt)' >> $GITHUB_ENV

        echo "Printing evaluated Gradle flags"
        echo "GRADLE_FLAGS: $GRADLE_FLAGS"
        
        echo "Printing LD_PRELOAD"
        echo "LD_PRELOAD: $LD_PRELOAD"

    - name: "Restore Gradle Wrapper"
      id: cache-gradle-wrapper
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.gradle/wrapper
        key: v2-${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

    - name: "Restore Gradle Home Cache"
      id: cache-gradle-home
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.gradle/caches
        key:
          v2-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}
        restore-keys: |
          v2-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}
          v2-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          v2-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}

    - name: "Restore Gradle Build Cache"
      id: cache-gradle-build
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.gradle/caches/build-cache-*
        key:
          v2-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/*.kt') }}
        restore-keys: |
          v2-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}
          v2-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}
          v2-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}
          v2-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

    - name: "Build, test, and lint"
      run: ./gradlew checkstyle ktlint assembleAlphaRelease lintAlphaRelease testAlphaRelease $GRADLE_FLAGS

    - name: "Publish Test Report"
      uses: mikepenz/action-junit-report@v4
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: '**/build/test-results/testAlphaUnitTest/TEST-*.xml'

    - name: List
      run: ls -alR ./app/build/outputs/apk/
    - uses: r0adkll/sign-android-release@v1
      name: Sign APK
      id: build_signed
      with:
        releaseDirectory: app/build/outputs/apk/alpha/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.KEY_STORE_ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
    - name: Create hash
      run: git rev-parse HEAD > app/build/outputs/apk/alpha/release/rev-hash.txt
    - name: Rename APK to universal
      run: mv app/build/outputs/apk/alpha/release/app-alpha-release-signed.apk app/build/outputs/apk/alpha/release/app-alpha-universal-release.apk
    - uses: dev-drprasad/delete-tag-and-release@v0.2.1
      name: Delete latest alpha tag and release
      with:
        tag_name: latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Sleep for 30 seconds, to allow the tag to be deleted
      run: sleep 30s
      shell: bash
    - uses: ncipollo/release-action@v1.12.0
      name: Create new tag and release and upload artifacts
      with:
        name: latest
        commit: main
        tag: latest
        artifacts: "app/build/outputs/apk/alpha/release/app-alpha-universal-release.apk,app/build/outputs/apk/alpha/release/rev-hash.txt"
        body: This is the latest Alpha version of the app (autogenerated).
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: "Save Gradle Wrapper"
      uses: actions/cache/save@v3
      if: steps.cache-gradle-wrapper.outputs.cache-hit != 'true'
      with:
        path: |
          ~/.gradle/wrapper
        key:
          v2-${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

    - name: "Save Gradle Build Cache"
      uses: actions/cache/save@v3
      if: steps.cache-gradle-build.outputs.cache-hit != 'true'
      with:
        path: |
          ~/.gradle/caches/build-cache-*
        key:
          v2-${{ runner.os }}-gradle-build-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}-${{ hashFiles('/tmp/gradle_flags.txt') }}-${{ hashFiles('**/*.gradle.kts') }}-${{ hashFiles('**/*.kt') }}

    - name: "Prepare Gradle Home Cache with only Dependency & Script Caches"
      if: steps.cache-gradle-home.outputs.cache-hit != 'true'
      run: |

        echo " "
        echo "Preserve Gradle home cache"
        find ~/.gradle/caches -maxdepth 1 -type d \
          -regex ".*/caches/.*" \
          -not -regex ".*/8.4" \
          -not -regex ".*/modules-2" | \
          xargs rm -rf
        
        echo " "
        echo "Preserve Gradle home configuration cache keystore and any generated Gradle jars"
        find ~/.gradle/caches/8.4 -maxdepth 1 -type d \
          -regex ".*/caches/8.4/.*" \
          -not -regex ".*/kotlin-dsl" \
          -not -regex ".*/generated-gradle-jars" | \
          xargs rm -rf

    - name: "Save Gradle Home cache"
      uses: actions/cache/save@v3
      if: steps.cache-gradle-home.outputs.cache-hit != 'true'
      with:
        path: |
          ~/.gradle/caches
        key:
          v2-${{ runner.os }}-gradle-home-${{ vars.JOB_NAME }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('gradle/libs.versions.toml') }}-${{ hashFiles('gradle.properties') }}
